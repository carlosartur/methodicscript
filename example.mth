###
Comentários de múltiplas linhas, documentações
###
#comentários de linhas simples
class Colour:
    public:
        method echoColour:
            echo(this.colour)
    static:
        const DEFAULT_COLOUR = "#FFF"
        method getDefaultColour:
            return Colour.DEFAULT_COLOUR
    private:
        attr colour


###
Shape class, parent abstract class
###
class Shape:
    abstract
    public:
        ###
        @attribute area
        ###
        attr area = 0
        
        ###
        echos area
        ###
        method echoArea:
            echo(this.area)
            
class Circle:
    extends Shape
    traits Colour
    public:
        attr area:
            get: method
                return (this.radius ** 2) * Math.PI 
        method constructor(radius):
            this.radius = radius
        
    private:
        attr radius = 0

class Rectangle:
    extends Shape
    traits Colour
    public:
        method constructor(width, height):
            this.width = width
            this.height = height
    private:
        attr area:
            get: method
                return this.width * this.height
        attr width = 0:
            get: method
                return this.width
            set: method(width)
                this.width = width
        attr height = 0:
            get: method
                return this.height
            set: method(height)
                this.height = height

class Square:
    extends Rectangle
    traits Colour
    public:
        method constructor(side):
            this.width = this.height = side

class Living:
    abstract

class Kinds:
    abstract
    public:
        method helloWorld():
            echo('Hello World')

class Animal:
    #sempre primeira linha não comentário, se não hover, vai extender classe object
    extends Living

    ###
    traits: não existem traits em si, aqui devem ser usadas classes que serão usadas como se fossem traits. 
    A ordem de chamada é a ordem de importancia, ou seja, se "Planets" tiver um método com o nome igual a "Kinds", 
    esse será desconsiderado em favor do método de "Kinds", porque "Kinds" foi chamada primeiro. Caso o método exista na própria classe,
    ele não será sobrescrito por trait.
    ###
    traits Kinds, Planets, Live  
    
    ###
    atributos públicos: internamente a única diferença entre os atributos públicos e privados é que
    atributos públicos a linguagem gera um getter e um setter padrão,
    e atributo privado, o getter e o setter tem que ser gerados manualmente, como no exemplo abaixo.
    o transpiler vai sempre renomear todos os atributos como "__nome_do_atributo"
    constantes devem ser sempre publicas, e a única diferença para outras variáveis é que o seu setter dispara um erro.
    ###
    public:        
        #getters e setters
        attr name:
            get: method 
                return this.name
            set: method(value) 
                this.name = value
        
        #valor padrão
        attr height = 125 

        #valor padrão, getters e setters
        attr color = "brown":
            get: method 
                return this.color
            set: method(value) 
                this.color = value

        #construtor padrão, se não for setado, será assim: os parametros serão recebidos em ordem que aparecem na classe, e serão setados conforme passados
        method constructor(name, height, color, foot_number, size):
            super.constructor()
            this.setParamsAsAttrs(name, height, color, foot_number, size)

        #se não houver um return, é a mesma coisa que "return this". se não tiver parametro nenhum, parenteses são opcionais
        method bla:
            echo(this.name)
        
        #valor padrão de parametro
        method blaWorldDefaultParams(worldILive = "Earth"):
            #interpolação de strings, valores com ${valor} e métodos ou códigos com ${código}
            echo(`Hello, ${worldILive}, I am ${this.name}`)
            echo(`${ 2 + 2 }`)
            return true
        
        method blaWorld2(worldILive, worldYouLive):
            echo(`Hello, ${worldILive}, I am ${this.name}`)
            return true
    private:
        attr foot_number:
            get: method 
                return this.foot_number / 2
            set: method(value) 
                this.foot_number * 2
        
        #totalmente privado, só acessível pelo próprio objeto
        attr size 
        
        method privateMethod(worldILive, worldYouLive):
            echo(`Hello, ${worldILive}, I am ${this.name}`)
            return true
        
    static:
        const KINGDOM = "Animalia"
        #static methods returns null if there's not a return statement
        method staticMethod():
            return true


#fora da classe, algumas coisas mudam
var x = new Animal('Rex', 120, 'brown', 4, 150)
#tipos primitivos, apenas booleanos, numeros e strings
var y = 123.123, z = 'Abc', a = false

#instruções de mais de uma linha seguem forma do javascript
y = 
    new Animal('Rex', 120, 'brown', 4, 150)

#if e else
if 1 == 2:
    echo(1)
elseif 100 > 200:
    echo(2)
elseunless 1000 < 2000:
    echo(4)
else:
    echo(3)

unless 1 == 2:
    echo('oi')

#switch - não usar break, não é necessário.
switch value:
    case 1:
        echo('is 1')
    case 2:
        echo('is 2')
    default:
        echo('is another')

###
laços de repetição
###
#for classico
from index = 0 to 100 step 2:
    echo(index)

#foreach & arrays & dictionaries
list = [1, 2, 3, 4]
dict = {
    abc:  'abc',
    123: '123',
}

for index in list as val:
    echo(`${val} is position ${index} in list`)

for index in dict as val:
    echo(`${val} is position ${index} in dict`)

#while
index = 0
while index < 100:
    echo('Hello while')
    index++
    
#do-while equivalent
repeat:
    echo('Hello')
    index--
while index > 0:

#functions fora das classes, se não tiver return, retornará null
function test(firstProp, secondProp = 1):
    return firstProp * secondProp

try:
    echo('hello')
catch exp:
    is TypeError:
        echo('TypeError')
    is ExampleExeption:
        echo('ExampleExeption')
    another:
        echo('Any other exeption')
finally:
    echo('finally')
